a=[2,3,6,6,8,12]

def index_location(array,find_number):
    left,right=0,len(array)-1
    mid=(left+right)//2

    while left<=right:
        if array[mid]==find_number:
            print('{}번째에 {}가 처음 위치합니다.'.format(mid,find_number))
            break
        elif array[mid]>find_number:
            right=mid-1
        else:
            left=mid+1
        mid=(left+right)//2

index_location(a,3)



from bisect import bisect_left,bisect_right

a=[2,3,6,6,6,10,12,15]
l=bisect_left(a,6) 
r=bisect_right(a,6)
print(r,l)
print(r-l)


#parametric Search[매개변수 탐색]
N,M=map(int,input().split()) #N is 나무의수, M is 가져가려 하는 나무의 높이를 의미한다.

tree=list(map(int,input().split())) #공백을 기준으로 list형태로 저장한다.

lo=0
hi=max(tree)
mid=(lo+hi)//2

def get_total_tree(h):
    ret=0
    for t in tree:
        if t>h:
            ret+=t-h #더 커야만이 내가 가져갈 수 있는 나무의 길이가 얻어질 수 있으므로.
    return ret

ans=0
while lo<=hi:
    if get_total_tree(mid)>=M:
        ans=mid
        lo=mid+1
    else:
        hi=mid-1
    mid=(lo+hi)//2

print(ans)




from bisect import bisect_left,bisect_right
N=int(input())
cards=sorted(map(int,input().split())) #작은 순서대로 정렬하기

M=int(input())
ans=[]
for i in map(int,input().split()):
    ans.append(bisect_right(cards,i)-bisect_left(cards,i))

for key in ans:
    print(key,end=' ')


cache=[-1]*37
def f(n):
    if cache[n]!=-1:
        return cache[n]
    cache[n]=n if n<2 else f(n-1)+f(n-2)
    return cache[n]

print(f(10))
print(cache)

#Tabulation

fibo=[-1]*37
for i in range(37):
    fibo[i]=i if i<2 else fibo[i-1]+fibo[i-2]
print(fibo[36])


#1로 making
#if x%3==0 x=x//3
#if x%2==0 x=x//2
#the other case : x-=1
#최대한 1로 만드는 횟수를 최소화하는 경우를 counting하라!

import sys
sys.setrecursionlimit(10**6)
INF=987654321 #무한
N=int(input())

cache=[INF]*(N+1)
cache[1]=0

def dp(x):
    if cache[x]!=INF:
        return cache[x]

    if x%6==0:
        cache[x]=min(dp(x//3),dp(x//2))+1
    elif x%3==0:
        cache[x]=min(dp(x//3),dp(x-1))+1
    elif x%2==0:
        cache[x]=min(dp(x//2),dp(x-1))+1
    else:
        cache[x]=dp(x-1)+1
    return cache[x]

print(dp(N))



#다른 version 으로 구해본 것.
from collections import deque

dq=deque()
N=int(input())
dq.append((N,0))
chk=[False]*(N+1)

while dq:
    x,d=dq.popleft()
    if x==1:
        print(d)
        break
    if x%3==0 and not chk[x//3]:
        dq.append((x//3,d+1))
        chk[x//3]=True
    if x%2==0 and not chk[x//2]:
        dq.append((x//2,d+1))
        chk[x//2]=True
    if not chk[x-1]:
        dq.append((x-1,d+1))
        chk[x-1]=True


import sys
input=sys.stdin.readline
n=int(input())
cache=[0]*(n+1)

def f(n):
    if cache[n]:
        return cache[n]

    cache[n]=n if n<=2 else (f(n-1)+f(n-2)) %10007
    return cache[n]

print(f(n))



for _ in range(int(input())):
    n=int(input())
    sticker=[list(map(int,input().split())) for _ in range(2)]
    dp=[[0]*n for _ in range(2)]
    for i in range(2):
        dp[i][0]=sticker[i][0]
        if n>1:
            dp[i][1]=sticker[i^1][0]+sticker[i][1]
    for j in range(2,n):
        for i in range(2):
            dp[i][j]=max(dp[i^1][j-2],dp[i^1][j-1])+sticker[i][j]
    
    print(max(dp[0][n-1],dp[1][n-1]))




