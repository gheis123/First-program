#회의실 배정
#ex) 11 -> 
#1 4/3 5/0 6/5 7/3 8/5 9/6 10/8 11/8 12/2 13/12 14
import sys

input=sys.stdin.readline
meetings=[]
for _ in range(int(input())):
    start,end=map(int,input().split())
    meetings.append((end,start))

meetings.sort() #끝시간이 작은 순서대로 정렬하기.
t=0
ans=0
for end,start in meetings:
    if t<=start: #꼬리보다 start가 가장 가까운 순서대로 logic 발현!
        ans+=1
        t=end #꼬리를 갱신하기.
print(ans)

#수리공 항승
#파이프에서 물이 새는 곳은 가장 왼쪽에서 정수만큼 떨어진 거리만 샌다.
#항승이는 항상 물을 막을 때, 적어도 그 위치의 좌우 0.5만큼 간격을 줘야 물이 안샌다 생각함.

#4 2(물이 새는곳,테이프길이)
#1 2 100 101 (물이 새는 곳의 위치)

coord=[False]*1001
N,L=map(int,input().split())
for i in map(int,input().split()):
    coord[i]=True # 물이 새는 곳의 위치를 True로 seeting.

ans=0
x=0
while x<=1000:
    if coord[x]: #coord[x]가 True라면!
        ans+=1
        x+=L #테이프를 붙임.
    else:
        x+=1 #위치 갱신하기.
print(ans)

#chapter 04
#DFS,BFS,백트래킹.

#Tree: 순환성이 없는 무방향 그래프.
#가장 바깥쪽 노드: leaf node
#노드개수(역)=간선개수(지하철노선)+1

#<완전탐색 알고리즘>
#DFS(깊이 우선 탐색): 스택 또는 재귀함수로 구현
#BFS(너비 우선 탐색): 큐로 구현->주로 시작노드에서 목표 노드까지 최단거리를 구할 때.
#일반적으로 최단거리 탐색은 BFS를 많이 사용한다.

#연결 요소의 개수
#정점의 개수(n), 간선의 개수(m)
#양끝점의 u와 v가 주어짐.
#example1
#6 5 --> 1 2 / 2 5 / 5 1 / 3 4 / 4 6 [output example is 2]
#6 8 --> 1 2 / 2 5 / 5 1 / 3 4 / 4 6 / 5 4 / 2 4 / 2 3 [output example is 1]

#DFS
import sys

sys.setrecursionlimit(10**6) #python은 재귀가 제한되어 있어,1000이상 쓰려면 필요하다.
input=sys.stdin.readline

N,M=map(int,input().split())

adj=[[False]*(N+1) for _ in range(N+1)]
for _ in range(M):
    a,b=map(int,input().split())
    adj[a][b]=True #무방향 및 양방향 그래프이므로!
    adj[b][a]=True
    
ans=0
chk=[False]*(N+1)

def dfs(i):
    for j in range(1,N+1):
        if adj[i][j] and not chk[j]:
            chk[j]=True #chk값을 True로 update(우리의 길과 True값이 일치한다면??)
            dfs(j)

for i in range(1,N+1):
    if not chk[i]: #chk[i]가 False면 실행됨. chk[i]가 True이면 실행되지 않음.
        ans+=1
        chk[i]=True #시작하는 위치에서의 값을 True로 갱신함.
        dfs(i) #그 행부터 탐색을 시작한다.

print(ans)

#미로찾기(NxM matrix)
#1은 이동가능, 0은 이동불가능.
#4 6            4 6           7 7 
#101111         110110        1011111
#101010         110110        1110001
#101011         111111        1000001
#111011 ->15    111101 ->9    1000001
#                             1000001
#                             1000001
#                             1111111 ->13
#BFS를 사용하여 풀어본다.

from collections import deque
dy=(0,1,0,-1)
dx=(1,0,-1,0)
N,M=map(int,input().split())
board=[input() for _ in range(N)]  #['101111',101010',0101011','111011']
chk=[[False]* M for _ in range(N)] #[[F,F,F,F,F,F],[F,F,F,F,F,F],[F,F,F,F,F,F],[F,F,F,F,F,F]]

dq=deque()
dq.append((0,0,1))
chk[0][0]=True

def is_valid_coord(y,x):
    return 0<=y<N and 0<=x<M  

while len(dq)>0:
    y,x,d=dq.popleft()
    if y==N-1 and x==M-1: #맨 마지막에 도달했을 때
        print(d) #그때의 distance 저장값을 출력한다. 그리고 마무리.
        break

    for k in range(4):
        ny=y+dy[k] #ny=y+0 ny=y+1 ny=y+0 ny=y-1
        nx=x+dx[k] #nx=x+1 nx=x+0 nx=x-1 nx=x+0
        nd=d+1
        if is_valid_coord(ny,nx) and board[ny][nx]=='1' and not chk[ny][nx]:
            chk[ny][nx]=True
            dq.append((ny,nx,nd))

#알파벳(세로 R칸, 가로 C칸으로 된 표 모양의 보드가 있다)
#말은 상하좌우로 인접한 네칸을 움직일 수 있지만, 모든 칸에 적혀있는 알파벳과는 달라야 한다.

#2 4         #3 6
#CAAB         BFDFFB   
#ADCB -> 3    AJHGDH
#             DGAGEH -->6 (말이 최대한 갈수있는 최대 거리수를 출력하라)

from collections import deque

dy=(0,1,0,-1)
dx=(1,0,-1,0)

R,C=map(int,input().split()) #2 4 
board=[input() for _ in range(R)] #ACCB ADCB 차례로 입력하기
chk=[set() for _ in range(C) for _ in range(R)] 
ans=0
#board: ['ACCB', 'ADCB']
#chk : [set(), set(), set(), set(), set(), set(), set(), set()]

def is_valid_coord(y,x):
    return 0<=y<R and o<=x<C

dq=deque()
chk[0][0].add(board[0][0])
dq.append((0,0,board[0][0]))
while dq:
    y,x,s=dq.popleft()
    ans=max(ans,len(s))

    for k in range(4):
        ny=y+dy[k]
        nx=x+dx[k]
        if is_valid_coord(ny,nx) and board[ny][nx] not in s:
            ns=s+board[ny][nx]
            if ns not in chk[ny][nx]:
                chk[ny][nx].add(ns)


