#1부터 10000까지 8은 몇번?
print(str(list(range(1,10001))).count('8'))

#S=[1,3,4,8,13,17,20]

s=[1,3,4,8,13,17,20]
ss=[3,4,8,13,17,20]
new_list=list(zip(s,ss))
print(sorted(new_list,key=lambda i:i[1]-i[0])[0])

#kakao coding_test 1 problem
#or 연산하기.
arr1=[9,20,28,18,11]
arr2=[30,1,21,17,28]
n=5

for i,j in zip(arr1,arr2):
    print(bin(i|j)[2:].zfill(n).replace('1','#').replace('0',' '))


#kakao coding_test 2 problem(dart game)
#다트게임은 총3번의 기회 (각 기회마다 얻을수있는 점수 0~10)
#S(1제곱), D(2제곱), T(3제곱)
#*: 해당점수와 바로 전 점수를 각 2배로 make
##: 해당점수 minus
#*는 첫번째에 나올 수 있으며, 첫번째 스타상의 점수만 2배가 딘다.
#*의 효과는 다른 스타상(*)의 효과와 중첩 가능하다
#*와#의 효과는 중첩가능하다. =>-2배가 된다.
#SDT는 점수마다 하나씩 존재하며, *#는 점수마다 둘중 하나만 존재가능 존재안할수도 있음.
#SDT*#로 구성된 문자열이 입력될때, 총점수를 반환하도록 설정하라.


import re
pattern=re.compile(r'([0-9|10])([SDT])([\#\*]?)')
answer=[]
for num,sdt,char in pattern.findall('1S2D*3T'):
    num=int(num)
    if sdt=='S':
        score=num**1
    elif sdt=='D':
        score=num**2
    elif sdt=='T':
        score=num**3
    if char=="*":
        score*=2
        if answer:
            answer[-1]*=2
    elif char=="#":
        score*=-1
    print(score)
    answer.append(score)
print(sum(answer))


#kakao coding_test 2 problem(other solution)
import re

def solution(dartResult):
    pattern=re.compile(r'([0-9]|10)([SDT])([\*\#]?)')
    answer=[]
    cal={'S':lambda val:val,
         'D':lambda val:val**2,
         'T':lambda val:val**3
    }

    for num,sdt,shop in pattern.findall(dartResult):
        if sdt=='S':
            score=cal['S'](int(num))
        elif sdt=='D':
            score=cal['D'](int(num))
        elif sdt=='T':
            score=cal['T'](int(num))
        if shop=='*':
            score*=2
            if answer:
                answer[-1]*=2
        elif shop=='#':
            score*=-1
        answer.append(score)
    return sum(answer)
   
print(solution('1S2D*3T'))

#kakao coding_test 3(cache)
#캐시크기(cacheSize)와 도시이름배열(cities)입력받음.
#캐시는 정수이며, 범위는 0~30이다.
#cities는 도시이름으로 최대 도시수는 100000개, 문자열 배열이다.
#각 도시이름은 공백, 숫자, 특수문자 등이 없는 영문자이다.

#["Jeju","Pangyo","Seoul","NewYork","LA","Jeju","Pangyo",
#     "Seoul","NewYork","LA"]

#cache hit : 1, cache hit: 5
from collections import deque


def solution(cacheSize,cities):
    list1=['']*cacheSize
    cache=deque(list1,maxlen=cacheSize)
    answer=0 #time
    for city in cities:
        city=city.lower()
        if city in cache:
            cache.remove(city)
            cache.append(city)
            answer+=1
        else:
            cache.append(city)
            answer+=5
    return answer


print(solution(3,["Jeju","Pangyo","Seoul","NewYork","LA","Jeju","Pangyo",
   "Seoul","NewYork","LA"]))

#kakao coding test 3(suttle bus)
#셔틀운행횟수n, 셔틀운행간격t, 한셔틀에 탈수있는 최대크루수 0<n<=10, 0<t<=60, 0<m<=45
def solution(n,t,m,timetable):
    timetable =sorted([int(i[:2])*60+int(i[3:]) for i in timetable])
    corn=540#콘의 출근시간.
    shuttle_time=540
    for i in range(n):
        for j in range(m): #한회차에 태울수있는 승객
            if timetable and timetable[0]<=shuttle_time:
                corn=timetable.pop(0)-1
            else:
                corn=shuttle_time
        shuttle_time+=t

    return f'{str(corn//60).zfill(2)}:{str(corn%60).zfill(2)}'

testcase=[(1,1,5,['08:00','08:01','08:02','08:03']),
          (2,10,2,['09:10','09:09','08:00']),
          (1,2,1,['09:00','09:00','09:00','09:00'])]
    
for n,t,m,timetable in testcase:
    print(solution(n,t,m,timetable))


#kakao coding test 5 problem
#news 클러스터링.
#자카드유사도 교집합크기/합집합크기
#모두 공집합일때에는 1
#다중집합도 허용함.
import re

def solution(str1,str2):
    str1=str1.lower()
    str2=str2.lower()

    str1List=[]
    str2List=[]
        
    pattern=re.compile(r'[a-z]{2}')
    for i in range(len(str1)-1):
        strr=str1[i]+str1[i+1]
        if pattern.findall(strr):
            str1List.append(strr)
    for i in range(len(str2)-1):
        strr=str2[i]+str2[i+1]
        if pattern.findall(strr):
            str2List.append(strr)
      
    print(str1List,str2List)
    a=set(str1List)&set(str2List)
    b=set(str1List)|set(str2List)
    
    a_add=0 #교집합 추가수
    for i in a: #교집합
        if str1List.count(i)>1 and str2List.count(i)>1:
            if str1List.count(i)>str2List.count(i):
                a_add+=str2List.count(i)-1
            else:
                a_add+=str1List.count(i)-1

    b_add=0
    for i in b: #합집합
        if str1List.count(i)>1 or str2List.count(i)>1:
            if str1List.count(i)>str2List.count(i):
                b_add+=str1List.count(i)-1
            else:
                b_add+=str2List.count(i)-1
          
    if (len(a)+a_add)==0:
        return 65536
    if (len(b)+b_add)==0:
        return 0

    result_value=((len(a)+a_add)/(len(b)+b_add))*65536
    return int(result_value)

testcase=[
    ('FRANCE','french'),
    ('handshake','shake hands'),
    ('aa1+aa2','AAAA12')
    ]

for str1,str2 in testcase:
    print(solution(str1,str2))

#kakao coding test 6 problem(friends_4_block)


list2=[list(i) for i in ['TTTANT','RRFACC','RRRFCC','TRRRAA','TTMMMF']]
m=4 #행
n=5 #열
import numpy as np
list1=[list(i) for i in ['CCBDE','AAADE','AAABF','CCBBF']]
list1=np.array(list1)
character=['R','M','A','F','N','T','J','C','B']

while True:
    eraser=[]
    for i in range(m-1):
        for j in range(n-1):
            for k in character:
                if np.all(list1[i:i+2,j:j+2]==k)==True:
                    eraser.append([i,j])
    if not eraser:
        break
    for i,j in eraser:
        list1[i:i+2,j:j+2]='_'
    
    for _ in range(m):
        for j in range(n): #열
            for i in range(1,m): #행
                if list1[i,j]=='_':
                    list1[i,j],list1[i-1,j]=list1[i-1,j],'_'

    print(list1)

result=0
for i in list1:
    for j in i:
        if j=='_':
            result+=1
print(result)


#open cheating room
def solution(record):
    answer=[] #최종으로 출력되는 메시지.
    user={}
    for log in record:
        logSplit=log.split(' ')
        if logSplit[0]=="Enter":
            user[logSplit[1]]=logSplit[2]
            answer.append([logSplit[1],'님이 들어왔습니다.'])

        elif logSplit[0]=="Leave":
            answer.append([logSplit[1],'님이 나갔습니다.'])

        elif logSplit[0]=="Change":
            user[logSplit[1]]=logSplit[2]
       
    answer=[useri[0]+i[1] for in answer]
    return answer

testcase=['Enter uid1234 Muzi',
          'Enter uid4567 Prodo',
          'Leave uid1234',
          'Enter uid1234 Prodo',
          'Change uid4567 Ryan']
print(solution(testcase))
