#example of 17 problems

#1 입출력에 대한 예제를 써보자(name,number,a,b)

#ctrl+k+c (주석처리하기)
#실행하기 F5
#ctrl+k+u (주석해제)


#name=input()
#number=int(input())
#a,b=map(int,input().split())
#print(name,number,a,b)

#2 빠른 입출력

#import sys
#input=sys.stdin.readline

#for _ in range(3):
#    n=input()
#    print(n)

#3 리스트 컴프리핸션 (1.특정 논리 2.이중 matrix)

#a=[i for i in range(1,11)]
#print(a)
#b=[[0 for _ in range(3)] for _ in range(4)]
#print(b)

#4 삼항연산자에 대한 2가지 예제(1. 짝수 찾기, 2.한번에 list로 짝수 해결하기)

a=[1,3,4,2,5,3,6,6,9]

#new_list=[]
#for key in a:
#    ans="even" if key%2==0 else "odd"
#    new_list.append(ans)
#print(new_list)

#b=["even" if i%2==0 else "odd" for i in a]
#print(b)

#5 요세푸스 순열 n은 사람의수, k는 껑충뛰어야 하는 경우의 수.

#n,k=map(int,input().split())
#peo=[i for i in range(1,n+1)] 
#pt=0
#ans=[]
#for _ in range(n):
#    pt=pt+(k-1)
#    pt=pt%len(peo)
#    ans.append(peo.pop(pt))

#print(f"<{', '.join(map(str,ans))}>")

#6 VPS test (wanted F,F,T,F,T,F) stack FILO

#def vps(x):
#    flag=True
#    stack=[]
#    for s in x:
#        if s=="(":
#            stack.append(s)
#        else:
#            if len(stack)>0:
#                stack.pop()
#            else:
#                flag=False
#    if len(stack)>0:
#        flag=False

#    return flag


#VPS_list=['(())())','(((()())()','(()())((()))','((()()(()))(((())))()',
#      '()()()()(()()())()','(()((())()(']

#ans=[]
#for string in VPS_list:
#    ans.append(vps(string))
#print(ans)

#7 큐 대신 무엇? FIFO

#from collections import deque
#dq=deque()
#dq.append(123)
#dq.append(456)
#while (dq):
#    print(dq.popleft())

#8 카드 게임 : 1~N까지의 카드를 넣는데 위에 부터 1~N 순서이다. 
#먼저 맨 위를 없애고 그다음 맨 위에 있는 것을 아래로 옮김.
#마지막에 있는 카드를 출력하시오.

#from collections import deque

#N=int(input())
#dq=deque()
#for i in range(1,N+1):
#    dq.append(i)

#while len(dq)>1:
#    dq.popleft()
#    dq.append(dq.popleft())
#print(dq.popleft())

#9. 우선순위 큐(Priority Queue) ->작은 것이 자연스럽게 위로 가있는 상태
#import heapq

#h=[]
#heapq.heappush(h,123)
#heapq.heappush(h,789)
#heapq.heappush(h,456)
#while len(h):
#    print(heapq.heappop(h))

#10 절댓값 힙.
#문제설명: 첫쨰줄에 연산 개수가 주어진다. 다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수x가 주어진다.
#만약 x가 0이 아니면, 배열에 x라는 것을 넣는 연산이고, x가 0이라면 배열에서 절댓값이 가장 작은 값 출력하고
#그 값을 배열에서 제거한다. 
#입력에서 0이 주어진 회수만큼 답 출력한다. 만약 배열이 비어있는 경우인데 절대값이 가장 작은 값을 
#출력하라고 하면 0을 출력하면 된다.

#ex) 18->1 -1 0 0 0 1 1 -1 -1 2 -2 0 0 0 0 0 0 0
#import sys,heapq

#input=sys.stdin.readline
#hp=[]

#for _ in range(int(input())): #쓴 숫자만큼을 반복한다.
#    x=int(input())
#    if x==0:
#        if len(hq):
#            print(heapq.heappop(hq)[1])
#        else:
#            print(0)
#    else:
#        heapq.heappush(hq,(abs(x),x))


#11. best seller
#오늘 하루 동안 팔린 책의 제목이 입력으로 들어왔을 떄, 가장 많이 팔린 책의 제목을 출력하라.
#ex) 5 t t t t k : t
#ex) 6 t t t c c c: c

#books=dict()
#for _ in range(int(input())):
#    name=input()
#    if name in books:
#        books[name]+=1
#    else:
#        books[name]=1 #초기화 (처음 상태)

##dict에서 가장 많이 나온 value 값을 추출하기.
#max_val=max(books.values())
#arr=[]
#for k,v in books.items():
#    if v==max_val:
#        arr.append(k)
#arr.sort()
#print(arr[0])


#12. 회사에 있는 사람
#직원들은 원할 떄 출근하고, 언제나 퇴근이 가능하다.
#ex) 4
#a enter -> b enter->b leave->c enter
#사전 순의 역순으로 출력하기
#원하는 추출상태: c a

#num=int(input())
#ans=[]
#condition=dict()
#for _ in range(int(input())):
#    name,con=input().split()
#    if con=="enter":
#        ans.add(name)
#    else:
#        if name in ans: #존재하는지 확인하고 name을 없애준다.
#            ans.remove(name)

#for name in sorted(ans,reverse=True): #역순으로 출력하는 프로그램.
#    print(name)

#13. 순열 example

#from itertools import permutations

#arr=[0,1,2,3]

#for i in permutations(arr,3):
#    print(i)

#14. 조합 example

#from itertools import combinations

#arr=[0,1,2,3]

#for i in combinations(arr,3):
#    print(i)


#15. 백설 공주와 일곱 난쟁이
#100보다 작은 양의 합이 100 ->9명중 7명의 숫자를 찾으면?

#list1=[7,8,10,13,15,19,20,23,25] #7 8 10 13 19 20 23 
#list2=[8,6,5,1,37,30,28,22,36] #8 6 5 1 30 28 22

#from itertools import combinations

#for i in combinations(list2,7):
#    if sum(i)==100:
#        for j in sorted(i):
#            print(j)
#        break

#16 유레카 이론
#삼각수는 기하학적으로 일정한 모양의 규칙을 갖는 점들의 묶음이다.
#Tn: 1+2+...+n
#몇몇 자연수가 정확하게 3개의 삼각수로 표현되는지?
#ex) 3->10 20 1000: 1 0 1(1은 삼각수로 표현할 수 있다는 뜻)

#T=[n*(n+1)//2 for n in range(1,47)]
#import sys
#input=sys.stdin.readline

#def possible(K):
#    for i in range(0,46):
#        for j in range(i,46):
#            for k in range(j,46):
#                if T[i]+T[j]+T[k]==K:
#                    return 1
#    return 0

#num1=int(input())
#for _ in range(num1):
#    num2=int(input())
#    print(possible(num2))


#17. Candy game.
#3           4           5 
#CCP         PPPP        YCPZY
#CCP         CYZY        CYZZP
#PPC  -->3   CCPY        CCPPP
#            PPCC ->4    YCYZC
#                        CPPZZ ->4

N=int(input())
x=[list(input()) for _ in range(N)] #각 N값에 대해 N개의 list 생성하기.
ans=1 #항상 최소는 1이므로

def search():
    global ans
    for i in range(N):
        cnt=1
        for j in range(0,N-1):
            if x[i][j]==x[i][j+1]:
                cnt+=1
                ans=max(ans,cnt)
            else:
                cnt=1
    
    for j in range(N):
        cnt=1
        for i in range(0,N-1):
            if x[i][j]==x[i+1][j]:
                cnt+=1
                ans=max(ans,cnt)
            else:
                cnt=1

for i in range(N):
    for j in range(0,N-1):
        x[i][j],x[i][j+1]=x[i][j+1],x[i][j]
        search()
        x[i][j],x[i][j+1]=x[i][j+1],x[i][j]

for j in range(N):
    for i in range(0,N-1):
        x[i][j],x[i+1][j]=x[i+1][j],x[i][j]
        search()
        x[i][j],x[i+1][j]=x[i+1][j],x[i][j]

print(ans)
